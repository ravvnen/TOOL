name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: "9.0.x"
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # Quality Gates - All must pass for PR merge
  code-quality:
    name: Code Quality & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Check code formatting
        run: dotnet format --verify-no-changes --verbosity diagnostic

      - name: Run linting/analyzers
        run: dotnet build --no-restore --configuration Release --verbosity normal

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality

    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build (${{ matrix.configuration }})
        run: dotnet build --no-restore --configuration ${{ matrix.configuration }}

      - name: Check for test projects
        id: check-tests
        run: |
          if find . -name "*.csproj" -exec grep -l "Microsoft.NET.Test.Sdk\|xunit\|NUnit\|MSTest" {} \; | head -1; then
            echo "has-tests=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Test projects found"
          else
            echo "has-tests=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No test projects found - skipping test execution"
          fi

      - name: Run tests
        if: steps.check-tests.outputs.has-tests == 'true'
        run: dotnet test --no-build --configuration ${{ matrix.configuration }} --logger trx --collect:"XPlat Code Coverage"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && steps.check-tests.outputs.has-tests == 'true'
        with:
          name: test-results-${{ matrix.configuration }}
          path: "**/*.trx"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always() && steps.check-tests.outputs.has-tests == 'true'
        with:
          name: coverage-${{ matrix.configuration }}
          path: "**/coverage.cobertura.xml"

  security-scan:
    name: Security & Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Check for vulnerable packages
        run: dotnet list package --vulnerable --include-transitive

      - name: Check for deprecated packages
        run: dotnet list package --deprecated

  # Final validation - only runs if all quality gates pass
  pr-validation:
    name: PR Ready for Merge
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, security-scan]
    if: github.event_name == 'pull_request'

    steps:
      - name: All checks passed
        run: |
          echo "‚úÖ Code quality checks passed"
          echo "‚úÖ Build successful in Debug and Release"  
          echo "‚úÖ Tests executed (if test projects exist)"
          echo "‚úÖ Security scan completed"
          echo "üöÄ PR is ready for merge!"
